{"/home/travis/build/npmtest/node-npmtest-axon/test.js":"/* istanbul instrument in package npmtest_axon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-axon/lib.npmtest_axon.js":"/* istanbul instrument in package npmtest_axon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_axon = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_axon = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-axon/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-axon && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_axon */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_axon\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_axon.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_axon.rollup.js'] =\n            local.assetsDict['/assets.npmtest_axon.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_axon.__dirname +\n                    '/lib.npmtest_axon.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/index.js":"\nmodule.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/index.js":"\n/**\n * Constructors.\n */\n\nexports.PubEmitterSocket = require('./sockets/pub-emitter');\nexports.SubEmitterSocket = require('./sockets/sub-emitter');\nexports.PushSocket = require('./sockets/push');\nexports.PullSocket = require('./sockets/pull');\nexports.PubSocket = require('./sockets/pub');\nexports.SubSocket = require('./sockets/sub');\nexports.ReqSocket = require('./sockets/req');\nexports.RepSocket = require('./sockets/rep');\nexports.Socket = require('./sockets/sock');\n\n/**\n * Socket types.\n */\n\nexports.types = {\n  'pub-emitter': exports.PubEmitterSocket,\n  'sub-emitter': exports.SubEmitterSocket,\n  'push': exports.PushSocket,\n  'pull': exports.PullSocket,\n  'pub': exports.PubSocket,\n  'sub': exports.SubSocket,\n  'req': exports.ReqSocket,\n  'rep': exports.RepSocket\n};\n\n/**\n * Return a new socket of the given `type`.\n *\n * @param {String} type\n * @param {Object} options\n * @return {Socket}\n * @api public\n */\n\nexports.socket = function(type, options){\n  var fn = exports.types[type];\n  if (!fn) throw new Error('invalid socket type \"' + type + '\"');\n  return new fn(options);\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/pub-emitter.js":"\n/**\n * Module dependencies.\n */\n\nvar PubSocket = require('./pub');\n\n/**\n * Expose `SubPubEmitterSocket`.\n */\n\nmodule.exports = PubEmitterSocket;\n\n/**\n * Initialzie a new `PubEmitterSocket`.\n *\n * @api private\n */\n\nfunction PubEmitterSocket() {\n  this.sock = new PubSocket;\n  this.emit = this.sock.send.bind(this.sock);\n  this.bind = this.sock.bind.bind(this.sock);\n  this.connect = this.sock.connect.bind(this.sock);\n  this.close = this.sock.close.bind(this.sock);\n}\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/pub.js":"\n/**\n * Module dependencies.\n */\n\nvar Socket = require('./sock');\nvar slice = require('../utils').slice;\n\n/**\n * Expose `PubSocket`.\n */\n\nmodule.exports = PubSocket;\n\n/**\n * Initialize a new `PubSocket`.\n *\n * @api private\n */\n\nfunction PubSocket() {\n  Socket.call(this);\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nPubSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Send `msg` to all established peers.\n *\n * @param {Mixed} msg\n * @api public\n */\n\nPubSocket.prototype.send = function(msg){\n  var socks = this.socks;\n  var len = socks.length;\n  var sock;\n\n  var buf = this.pack(arguments);\n\n  for (var i = 0; i < len; i++) {\n    sock = socks[i];\n    if (sock.writable) sock.write(buf);\n  }\n\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/sock.js":"\n/**\n * Module dependencies.\n */\n\nvar Emitter = require('events').EventEmitter;\nvar Configurable = require('configurable');\nvar debug = require('debug')('axon:sock');\nvar Message = require('amp-message');\nvar Parser = require('amp').Stream;\nvar url = require('url');\nvar net = require('net');\nvar fs = require('fs');\n\n/**\n * Errors to ignore.\n */\n\nvar ignore = [\n  'ECONNREFUSED',\n  'ECONNRESET',\n  'ETIMEDOUT',\n  'EHOSTUNREACH',\n  'ENETUNREACH',\n  'ENETDOWN',\n  'EPIPE',\n  'ENOENT'\n];\n\n/**\n * Expose `Socket`.\n */\n\nmodule.exports = Socket;\n\n/**\n * Initialize a new `Socket`.\n *\n * A \"Socket\" encapsulates the ability of being\n * the \"client\" or the \"server\" depending on\n * whether `connect()` or `bind()` was called.\n *\n * @api private\n */\n\nfunction Socket() {\n  this.server = null;\n  this.socks = [];\n  this.settings = {};\n  this.set('hwm', Infinity);\n  this.set('identity', String(process.pid));\n  this.set('retry timeout', 100);\n  this.set('retry max timeout', 5000);\n}\n\n/**\n * Inherit from `Emitter.prototype`.\n */\n\nSocket.prototype.__proto__ = Emitter.prototype;\n\n/**\n * Make it configurable `.set()` etc.\n */\n\nConfigurable(Socket.prototype);\n\n/**\n * Use the given `plugin`.\n *\n * @param {Function} plugin\n * @api private\n */\n\nSocket.prototype.use = function(plugin){\n  plugin(this);\n  return this;\n};\n\n/**\n * Creates a new `Message` and write the `args`.\n *\n * @param {Array} args\n * @return {Buffer}\n * @api private\n */\n\nSocket.prototype.pack = function(args){\n  var msg = new Message(args);\n  return msg.toBuffer();\n};\n\n/**\n * Close all open underlying sockets.\n *\n * @api private\n */\n\nSocket.prototype.closeSockets = function(){\n  debug('%s closing %d connections', this.type, this.socks.length);\n  this.socks.forEach(function(sock){\n    sock.destroy();\n  });\n};\n\n/**\n * Close the socket.\n *\n * Delegates to the server or clients\n * based on the socket `type`.\n *\n * @param {Function} [fn]\n * @api public\n */\n\nSocket.prototype.close = function(fn){\n  debug('%s closing', this.type);\n  this.closing = true;\n  this.closeSockets();\n  if (this.server) this.closeServer(fn);\n};\n\n/**\n * Close the server.\n *\n * @param {Function} [fn]\n * @api public\n */\n\nSocket.prototype.closeServer = function(fn){\n  debug('%s closing server', this.type);\n  this.server.on('close', this.emit.bind(this, 'close'));\n  this.server.close();\n  fn && fn();\n};\n\n/**\n * Return the server address.\n *\n * @return {Object}\n * @api public\n */\n\nSocket.prototype.address = function(){\n  if (!this.server) return;\n  var addr = this.server.address();\n  addr.string = 'tcp://' + addr.address + ':' + addr.port;\n  return addr;\n};\n\n/**\n * Remove `sock`.\n *\n * @param {Socket} sock\n * @api private\n */\n\nSocket.prototype.removeSocket = function(sock){\n  var i = this.socks.indexOf(sock);\n  if (!~i) return;\n  debug('%s remove socket %d', this.type, i);\n  this.socks.splice(i, 1);\n};\n\n/**\n * Add `sock`.\n *\n * @param {Socket} sock\n * @api private\n */\n\nSocket.prototype.addSocket = function(sock){\n  var parser = new Parser;\n  var i = this.socks.push(sock) - 1;\n  debug('%s add socket %d', this.type, i);\n  sock.pipe(parser);\n  parser.on('data', this.onmessage(sock));\n};\n\n/**\n * Handle `sock` errors.\n *\n * Emits:\n *\n *  - `error` (err) when the error is not ignored\n *  - `ignored error` (err) when the error is ignored\n *  - `socket error` (err) regardless of ignoring\n *\n * @param {Socket} sock\n * @api private\n */\n\nSocket.prototype.handleErrors = function(sock){\n  var self = this;\n  sock.on('error', function(err){\n    debug('%s error %s', self.type, err.code || err.message);\n    self.emit('socket error', err);\n    self.removeSocket(sock);\n    if (!~ignore.indexOf(err.code)) return self.emit('error', err);\n    debug('%s ignored %s', self.type, err.code);\n    self.emit('ignored error', err);\n  });\n};\n\n/**\n * Handles framed messages emitted from the parser, by\n * default it will go ahead and emit the \"message\" events on\n * the socket. However, if the \"higher level\" socket needs\n * to hook into the messages before they are emitted, it\n * should override this method and take care of everything\n * it self, including emitted the \"message\" event.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nSocket.prototype.onmessage = function(sock){\n  var self = this;\n  return function(buf){\n    var msg = new Message(buf);\n    self.emit.apply(self, ['message'].concat(msg.args));\n  };\n};\n\n/**\n * Connect to `port` at `host` and invoke `fn()`.\n *\n * Defaults `host` to localhost.\n *\n * TODO: needs big cleanup\n *\n * @param {Number|String} port\n * @param {String} host\n * @param {Function} fn\n * @return {Socket}\n * @api public\n */\n\nSocket.prototype.connect = function(port, host, fn){\n  var self = this;\n  if ('server' == this.type) throw new Error('cannot connect() after bind()');\n  if ('function' == typeof host) {\n    fn = host;\n    host = undefined;\n  }\n\n  if ('string' == typeof port) {\n    port = url.parse(port);\n\n    if (port.protocol == \"unix:\") {\n      host = fn;\n      fn = undefined;\n      port = port.pathname;\n    } else {\n      host = port.hostname || '0.0.0.0';\n      port = parseInt(port.port, 10);\n    }\n  } else {\n    host = host || '0.0.0.0';\n  }\n\n  var max = self.get('retry max timeout');\n  var sock = new net.Socket;\n  sock.setNoDelay();\n  this.type = 'client';\n\n  this.handleErrors(sock);\n\n  sock.on('close', function(){\n    self.emit('socket close', sock);\n    self.connected = false;\n    self.removeSocket(sock);\n    if (self.closing) return self.emit('close');\n    var retry = self.retry || self.get('retry timeout');\n    setTimeout(function(){\n      debug('%s attempting reconnect', self.type);\n      self.emit('reconnect attempt');\n      sock.destroy();\n      self.connect(port, host);\n      self.retry = Math.round(Math.min(max, retry * 1.5));\n    }, retry);\n  });\n\n  sock.on('connect', function(){\n    debug('%s connect', self.type);\n    self.connected = true;\n    self.addSocket(sock);\n    self.retry = self.get('retry timeout');\n    self.emit('connect', sock);\n    fn && fn();\n  });\n\n  debug('%s connect attempt %s:%s', self.type, host, port);\n  sock.connect(port, host);\n  return this;\n};\n\n/**\n * Handle connection.\n *\n * @param {Socket} sock\n * @api private\n */\n\nSocket.prototype.onconnect = function(sock){\n  var self = this;\n  var addr = sock.remoteAddress + ':' + sock.remotePort;\n  debug('%s accept %s', self.type, addr);\n  this.addSocket(sock);\n  this.handleErrors(sock);\n  this.emit('connect', sock);\n  sock.on('close', function(){\n    debug('%s disconnect %s', self.type, addr);\n    self.emit('disconnect', sock);\n    self.removeSocket(sock);\n  });\n};\n\n/**\n * Bind to `port` at `host` and invoke `fn()`.\n *\n * Defaults `host` to INADDR_ANY.\n *\n * Emits:\n *\n *  - `connection` when a client connects\n *  - `disconnect` when a client disconnects\n *  - `bind` when bound and listening\n *\n * @param {Number|String} port\n * @param {Function} fn\n * @return {Socket}\n * @api public\n */\n\nSocket.prototype.bind = function(port, host, fn){\n  var self = this;\n  if ('client' == this.type) throw new Error('cannot bind() after connect()');\n  if ('function' == typeof host) {\n    fn = host;\n    host = undefined;\n  }\n\n  var unixSocket = false;\n\n  if ('string' == typeof port) {\n    port = url.parse(port);\n\n    if ('unix:' == port.protocol) {\n      host = fn;\n      fn = undefined;\n      port = port.pathname;\n      unixSocket = true;\n    } else {\n      host = port.hostname || '0.0.0.0';\n      port = parseInt(port.port, 10);\n    }\n  } else {\n    host = host || '0.0.0.0';\n  }\n\n  this.type = 'server';\n\n  this.server = net.createServer(this.onconnect.bind(this));\n\n  debug('%s bind %s:%s', this.type, host, port);\n  this.server.on('listening', this.emit.bind(this, 'bind'));\n\n  if (unixSocket) {\n    // TODO: move out\n    this.server.on('error', function(e) {\n      if (e.code == 'EADDRINUSE') {\n        // Unix file socket and error EADDRINUSE is the case if\n        // the file socket exists. We check if other processes\n        // listen on file socket, otherwise it is a stale socket\n        // that we could reopen\n        // We try to connect to socket via plain network socket\n        var clientSocket = new net.Socket();\n\n        clientSocket.on('error', function(e2) {\n          if (e2.code == 'ECONNREFUSED') {\n            // No other server listening, so we can delete stale\n            // socket file and reopen server socket\n            fs.unlink(port);\n            self.server.listen(port, host, fn);\n          }\n        });\n\n        clientSocket.connect({path: port}, function() {\n          // Connection is possible, so other server is listening\n          // on this file socket\n          throw e;\n        });\n      }\n    });\n  }\n\n  this.server.listen(port, host, fn);\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/utils.js":"\n/**\n * Slice helper.\n *\n * @api private\n * @param {Arguments} args\n * @return {Array}\n */\n\nexports.slice = function(args){\n  var len = args.length;\n  var ret = new Array(len);\n\n  for (var i = 0; i < len; i++) {\n    ret[i] = args[i];\n  }\n\n  return ret;\n};","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/sub-emitter.js":"\n/**\n * Module dependencies.\n */\n\nvar Message = require('amp-message');\nvar SubSocket = require('./sub');\n\n/**\n * Expose `SubEmitterSocket`.\n */\n\nmodule.exports = SubEmitterSocket;\n\n/**\n * Initialzie a new `SubEmitterSocket`.\n *\n * @api private\n */\n\nfunction SubEmitterSocket() {\n  this.sock = new SubSocket;\n  this.sock.onmessage = this.onmessage.bind(this);\n  this.bind = this.sock.bind.bind(this.sock);\n  this.connect = this.sock.connect.bind(this.sock);\n  this.close = this.sock.close.bind(this.sock);\n  this.listeners = [];\n}\n\n/**\n * Message handler.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nSubEmitterSocket.prototype.onmessage = function(){\n  var listeners = this.listeners;\n  var self = this;\n\n  return function(buf){\n    var msg = new Message(buf);\n    var topic = msg.shift();\n\n    for (var i = 0; i < listeners.length; ++i) {\n      var listener = listeners[i];\n\n      var m = listener.re.exec(topic);\n      if (!m) continue;\n\n      listener.fn.apply(self, m.slice(1).concat(msg.args));\n    }\n  }\n};\n\n/**\n * Subscribe to `event` and invoke the given callback `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {SubEmitterSocket} self\n * @api public\n */\n\nSubEmitterSocket.prototype.on = function(event, fn){\n  var re = this.sock.subscribe(event);\n  this.listeners.push({\n    event: event,\n    re: re,\n    fn: fn\n  });\n  return this;\n};\n\n/**\n * Unsubscribe with the given `event`.\n *\n * @param {String} event\n * @return {SubEmitterSocket} self\n * @api public\n */\n\nSubEmitterSocket.prototype.off = function(event){\n  for (var i = 0; i < this.listeners.length; ++i) {\n    if (this.listeners[i].event === event) {\n      this.sock.unsubscribe(this.listeners[i].re);\n      this.listeners.splice(i--, 1);\n    }\n  }\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/sub.js":"\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('axon:sub');\nvar escape = require('escape-regexp');\nvar Message = require('amp-message');\nvar Socket = require('./sock');\n\n/**\n * Expose `SubSocket`.\n */\n\nmodule.exports = SubSocket;\n\n/**\n * Initialize a new `SubSocket`.\n *\n * @api private\n */\n\nfunction SubSocket() {\n  Socket.call(this);\n  this.subscriptions = [];\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nSubSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Check if this socket has subscriptions.\n *\n * @return {Boolean}\n * @api public\n */\n\nSubSocket.prototype.hasSubscriptions = function(){\n  return !! this.subscriptions.length;\n};\n\n/**\n * Check if any subscriptions match `topic`.\n *\n * @param {String} topic\n * @return {Boolean}\n * @api public\n */\n\nSubSocket.prototype.matches = function(topic){\n  for (var i = 0; i < this.subscriptions.length; ++i) {\n    if (this.subscriptions[i].test(topic)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Message handler.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nSubSocket.prototype.onmessage = function(sock){\n  var subs = this.hasSubscriptions();\n  var self = this;\n\n  return function(buf){\n    var msg = new Message(buf);\n\n    if (subs) {\n      var topic = msg.args[0];\n      if (!self.matches(topic)) return debug('not subscribed to \"%s\"', topic);\n    }\n\n    self.emit.apply(self, ['message'].concat(msg.args));\n  };\n};\n\n/**\n * Subscribe with the given `re`.\n *\n * @param {RegExp|String} re\n * @return {RegExp}\n * @api public\n */\n\nSubSocket.prototype.subscribe = function(re){\n  debug('subscribe to \"%s\"', re);\n  this.subscriptions.push(re = toRegExp(re));\n  return re;\n};\n\n/**\n * Unsubscribe with the given `re`.\n *\n * @param {RegExp|String} re\n * @api public\n */\n\nSubSocket.prototype.unsubscribe = function(re){\n  debug('unsubscribe from \"%s\"', re);\n  re = toRegExp(re);\n  for (var i = 0; i < this.subscriptions.length; ++i) {\n    if (this.subscriptions[i].toString() === re.toString()) {\n      this.subscriptions.splice(i--, 1);\n    }\n  }\n};\n\n/**\n * Clear current subscriptions.\n *\n * @api public\n */\n\nSubSocket.prototype.clearSubscriptions = function(){\n  this.subscriptions = [];\n};\n\n/**\n * Subscribers should not send messages.\n */\n\nSubSocket.prototype.send = function(){\n  throw new Error('subscribers cannot send messages');\n};\n\n/**\n * Convert `str` to a `RegExp`.\n *\n * @param {String} str\n * @return {RegExp}\n * @api private\n */\n\nfunction toRegExp(str) {\n  if (str instanceof RegExp) return str;\n  str = escape(str);\n  str = str.replace(/\\\\\\*/g, '(.+)');\n  return new RegExp('^' + str + '$');\n}","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/push.js":"\n/**\n * Module dependencies.\n */\n\nvar roundrobin = require('../plugins/round-robin');\nvar queue = require('../plugins/queue');\nvar Socket = require('./sock');\n\n/**\n * Expose `PushSocket`.\n */\n\nmodule.exports = PushSocket;\n\n/**\n * Initialize a new `PushSocket`.\n *\n * @api private\n */\n\nfunction PushSocket() {\n  Socket.call(this);\n  this.use(queue());\n  this.use(roundrobin({ fallback: this.enqueue }));\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nPushSocket.prototype.__proto__ = Socket.prototype;","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/plugins/round-robin.js":"\n/**\n * Deps.\n */\n\nvar slice = require('../utils').slice;\n\n/**\n * Round-robin plugin.\n *\n * Provides a `send` method which will\n * write the `msg` to all connected peers.\n *\n * @param {Object} options\n * @api private\n */\n\nmodule.exports = function(options){\n  options = options || {};\n  var fallback = options.fallback || function(){};\n\n  return function(sock){\n\n    /**\n     * Bind callback to `sock`.\n     */\n\n    fallback = fallback.bind(sock);\n\n    /**\n     * Initialize counter.\n     */\n\n    var n = 0;\n\n    /**\n     * Sends `msg` to all connected peers round-robin.\n     */\n\n    sock.send = function(){\n      var socks = this.socks;\n      var len = socks.length;\n      var sock = socks[n++ % len];\n\n      var msg = slice(arguments);\n\n      if (sock && sock.writable) {\n        sock.write(this.pack(msg));\n      } else {\n        fallback(msg);\n      }\n    };\n\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/plugins/queue.js":"\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('axon:queue');\n\n/**\n * Queue plugin.\n *\n * Provides an `.enqueue()` method to the `sock`. Messages\n * passed to `enqueue` will be buffered until the next\n * `connect` event is emitted.\n *\n * Emits:\n *\n *  - `drop` (msg) when a message is dropped\n *  - `flush` (msgs) when the queue is flushed\n *\n * @param {Object} options\n * @api private\n */\n\nmodule.exports = function(options){\n  options = options || {};\n\n  return function(sock){\n\n    /**\n     * Message buffer.\n     */\n\n    sock.queue = [];\n\n    /**\n     * Flush `buf` on `connect`.\n     */\n\n    sock.on('connect', function(){\n      var prev = sock.queue;\n      var len = prev.length;\n      sock.queue = [];\n      debug('flush %d messages', len);\n\n      for (var i = 0; i < len; ++i) {\n        this.send.apply(this, prev[i]);\n      }\n\n      sock.emit('flush', prev);\n    });\n\n    /**\n     * Pushes `msg` into `buf`.\n     */\n\n    sock.enqueue = function(msg){\n      var hwm = sock.settings.hwm;\n      if (sock.queue.length >= hwm) return drop(msg);\n      sock.queue.push(msg);\n    };\n\n    /**\n     * Drop the given `msg`.\n     */\n\n    function drop(msg) {\n      debug('drop');\n      sock.emit('drop', msg);\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/pull.js":"\n/**\n * Module dependencies.\n */\n\nvar Socket = require('./sock');\n\n/**\n * Expose `PullSocket`.\n */\n\nmodule.exports = PullSocket;\n\n/**\n * Initialize a new `PullSocket`.\n *\n * @api private\n */\n\nfunction PullSocket() {\n  Socket.call(this);\n  // TODO: selective reception\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nPullSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Pull sockets should not send messages.\n */\n\nPullSocket.prototype.send = function(){\n  throw new Error('pull sockets should not send messages');\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/req.js":"\n/**\n * Module dependencies.\n */\n\nvar debug = require('debug')('axon:req');\nvar queue = require('../plugins/queue');\nvar slice = require('../utils').slice;\nvar Message = require('amp-message');\nvar Socket = require('./sock');\n\n/**\n * Expose `ReqSocket`.\n */\n\nmodule.exports = ReqSocket;\n\n/**\n * Initialize a new `ReqSocket`.\n *\n * @api private\n */\n\nfunction ReqSocket() {\n  Socket.call(this);\n  this.n = 0;\n  this.ids = 0;\n  this.callbacks = {};\n  this.identity = this.get('identity');\n  this.use(queue());\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nReqSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Return a message id.\n *\n * @return {String}\n * @api private\n */\n\nReqSocket.prototype.id = function(){\n  return this.identity + ':' + this.ids++;\n};\n\n/**\n * Emits the \"message\" event with all message parts\n * after the null delimeter part.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, multipart)\n * @api private\n */\n\nReqSocket.prototype.onmessage = function(){\n  var self = this;\n  return function(buf){\n    var msg = new Message(buf);\n    var id = msg.pop();\n    var fn = self.callbacks[id];\n    if (!fn) return debug('missing callback %s', id);\n    fn.apply(null, msg.args);\n    delete self.callbacks[id];\n  };\n};\n\n/**\n * Sends `msg` to the remote peers. Appends\n * the null message part prior to sending.\n *\n * @param {Mixed} msg\n * @api public\n */\n\nReqSocket.prototype.send = function(msg){\n  var socks = this.socks;\n  var len = socks.length;\n  var sock = socks[this.n++ % len];\n  var args = slice(arguments);\n\n  if (sock) {\n    var hasCallback = 'function' == typeof args[args.length - 1];\n    if (!hasCallback) args.push(function(){});\n    var fn = args.pop();\n    fn.id = this.id();\n    this.callbacks[fn.id] = fn;\n    args.push(fn.id);\n  }\n\n  if (sock) {\n    sock.write(this.pack(args));\n  } else {\n    debug('no connected peers');\n    this.enqueue(args);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/lib/sockets/rep.js":"\n/**\n * Module dependencies.\n */\n\nvar slice = require('../utils').slice;\nvar debug = require('debug')('axon:rep');\nvar Message = require('amp-message');\nvar Socket = require('./sock');\n\n/**\n * Expose `RepSocket`.\n */\n\nmodule.exports = RepSocket;\n\n/**\n * Initialize a new `RepSocket`.\n *\n * @api private\n */\n\nfunction RepSocket() {\n  Socket.call(this);\n}\n\n/**\n * Inherits from `Socket.prototype`.\n */\n\nRepSocket.prototype.__proto__ = Socket.prototype;\n\n/**\n * Incoming.\n *\n * @param {net.Socket} sock\n * @return {Function} closure(msg, mulitpart)\n * @api private\n */\n\nRepSocket.prototype.onmessage = function(sock){\n  var self = this;\n\n  return function (buf){\n    var msg = new Message(buf);\n    var args = msg.args;\n\n    var id = args.pop();\n    args.unshift('message');\n    args.push(reply);\n    self.emit.apply(self, args);\n\n    function reply() {\n      var fn = function(){};\n      var args = slice(arguments);\n      args[0] = args[0] || null;\n\n      var hasCallback = 'function' == typeof args[args.length - 1];\n      if (hasCallback) fn = args.pop();\n\n      args.push(id);\n\n      if (sock.writable) {\n        sock.write(self.pack(args), function(){ fn(true) });\n        return true;\n      } else {\n        debug('peer went away');\n        process.nextTick(function(){ fn(false) });\n        return false;\n      }\n    }\n  };\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/benchmark/pub.js":"\nvar ss = require('..')\n  , program = require('commander');\n\nprogram\n  .option('-T, --type <name>', 'socket type [pub]', 'pub')\n  .option('-t, --per-tick <n>', 'messages per tick [1000]', parseInt)\n  .option('-s, --size <n>', 'message size in bytes [1024]', parseInt)\n  .option('-d, --duration <n>', 'duration of test [5000]', parseInt)\n  .parse(process.argv)\n\nvar sock = ss.socket(program.type);\nsock.bind(3000);\nsock.on('disconnect', process.exit);\nconsole.log('pub bound');\n\nvar perTick = program.perTick || 1000;\nvar buf = new Buffer(Array(program.size || 1024).join('a'));\nconsole.log('sending %d per tick', perTick);\nconsole.log('sending %d byte messages', buf.length);\n\nfunction more() {\n  for (var i = 0; i < perTick; ++i) sock.send(buf);\n  setImmediate(more);\n}\n\nmore();\n","/home/travis/build/npmtest/node-npmtest-axon/node_modules/axon/benchmark/sub.js":"\nvar ss = require('..')\n  , program = require('commander')\n  , humanize = require('humanize-number');\n\nprogram\n  .option('-T, --type <name>', 'socket type [sub]', 'sub')\n  .option('-s, --size <n>', 'message size in bytes [1024]', parseInt)\n  .option('-d, --duration <n>', 'duration of test [5000]', parseInt)\n  .parse(process.argv)\n\nvar sock = ss.socket(program.type);\nsock.connect(3000);\n\nvar n = 0;\nvar ops = 5000;\nvar bytes = program.size || 1024;\nvar prev = start = Date.now();\nvar results = [];\n\nconsole.log();\n\nsock.on('message', function(msg){\n  if (n++ % ops == 0) {\n    var ms = Date.now() - prev;\n    var sec = ms / 1000;\n    var persec = ops / sec | 0;\n    results.push(persec);\n    process.stdout.write('\\r  [' + persec + ' ops/s] [' + n + ']');\n    prev = Date.now();\n  }\n});\n\nfunction sum(arr) {\n  return arr.reduce(function(sum, n){\n    return sum + n;\n  });\n}\n\nfunction min(arr) {\n  return arr.reduce(function(min, n){\n    return n < min\n      ? n\n      : min;\n  });\n}\n\nfunction median(arr) {\n  arr = arr.sort();\n  return arr[arr.length / 2 | 0];\n}\n\nfunction done(){\n  var ms = Date.now() - start;\n  var avg = n / (ms / 1000);\n  console.log('\\n');\n  console.log('      min: %s ops/s', humanize(min(results)));\n  console.log('     mean: %s ops/s', humanize(avg | 0));\n  console.log('   median: %s ops/s', humanize(median(results)));\n  console.log('    total: %s ops in %ds', humanize(n), ms / 1000);\n  console.log('  through: %d mb/s', ((avg * bytes) / 1024 / 1024).toFixed(2));\n  console.log();\n  process.exit();\n}\n\nprocess.on('SIGINT', done);\nsetTimeout(done, program.duration || 5000);\n"}